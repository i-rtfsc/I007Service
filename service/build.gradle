apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'

android {
    def androidSdk = rootProject.ext.androidSdk
    compileSdkVersion androidSdk.compileSdkVersion
    buildToolsVersion androidSdk.buildToolsVersion
    defaultConfig {
        applicationId androidSdk.applicationId
        minSdkVersion androidSdk.minSdkVersion
        targetSdkVersion androidSdk.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        flavorDimensions "default"
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            assets.srcDirs = ['assets']
            res.srcDirs = ['res']
            java.srcDirs = ['src']
            aidl.srcDirs = ['aidl']
            jniLibs.srcDirs = ['libs']
        }
    }

    dataBinding {
        enabled true
    }

    androidResources {
        noCompress "tflite"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            storeFile file("../keystore/platform.jks")
            storePassword 'android'
            keyAlias 'platform'
            keyPassword 'android'
        }
        debug {
            storeFile file("../keystore/platform.jks")
            storePassword 'android'
            keyAlias 'platform'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled true
            consumerProguardFiles "${project.rootDir}/proguard-rules.pro"
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            zipAlignEnabled true
            consumerProguardFiles "${project.rootDir}/proguard-rules.pro"
            signingConfig signingConfigs.debug
        }
    }

    productFlavors {
        standard {
            buildConfigField "String", "BUILD_PRODUCT", "\"standard\""
        }
        //machine learning(all)
        ml {
            buildConfigField "String", "BUILD_PRODUCT", "\"ml\""
        }
        //machine learning(only tf)
        tf {
            buildConfigField "String", "BUILD_PRODUCT", "\"tflite\""
        }
        //machine learning(only pytorch)
        torch {
            buildConfigField "String", "BUILD_PRODUCT", "\"pytorch\""
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def flavors = variant.productFlavors.name
            def apkName = "I007Service-${flavors[0]}.apk"
            outputFileName = new File("./../../../../../../out/${variant.buildType.name}/", apkName)
            //logger.log(LogLevel.WARN, "----------> output apk = ${outputFileName}")
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':framework')
    implementation project(':monitor')
    //标准版本不需要 machine learning 模块。
    //但service中用调用 machine learning 模块代码，需要用 compileOnly 确保编译不报错。
    //service中用到 machine learning 模块是是通过宏 BUILD_PRODUCT 来控制，无需担心运行时报错的问题。
    standardCompileOnly project(':machinelearning')

    //所有模型都打包
    mlImplementation project(':machinelearning')
    mlImplementation project(':tflite')
    mlImplementation project(':pytorch')

    //只打包tflite模型
    tfImplementation project(':machinelearning')
    tfImplementation project(':tflite')

    //只打包pytorch模型
    torchImplementation project(':machinelearning')
    torchImplementation project(':pytorch')
}
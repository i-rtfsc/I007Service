apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
        versionCode Integer.parseInt(project.ANDROID_BUILD_VERSION_CODE)
        versionName project.ANDROID_BUILD_VERSION_NAME
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // This is important, it will run lint checks but won't abort build
    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            aidl.srcDirs = ['src']
            main.java.srcDirs = ['src']
        }
    }

    // Add for using latest experimental build of Android Extensions
    androidExtensions {
        experimental = true
    }

}

dependencies {
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib:$project.KOTLIN"
    compileOnly "com.google.code.gson:gson:$project.GSON"
    compileOnly "android.arch.persistence.room:runtime:$project.ROOM"
    kapt "android.arch.persistence.room:compiler:$project.ROOM"
    compileOnly "io.reactivex.rxjava2:rxandroid:$project.RX_ANDROID"
    implementation 'com.journeyOS:liteprovider:1.2.1'
}


task deleteJar(type: Delete) {
    delete 'libs/jars/i007Service.jar'
}

task createJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('libs/jars/')
    include('classes.jar')
    rename('classes.jar', 'i007Service.jar')
}

createJar.dependsOn(deleteJar, build)

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

group = "com.journeyOS"
version = "1.5.1.003"

def siteUrl = 'https://github.com/journeyOS/I007Service'
def gitUrl = 'git@github.com:journeyOS/I007Service.git'

install {
    repositories.mavenInstaller {

        pom {
            project {
                packaging 'jar'
                name 'I007Service'
                url siteUrl
                description = 'LiteTask is an extremely light way to execute code in the background on Android.'

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    configurations = ['archives']
    pkg {
        repo = "I007Service"
        name = "i007Service"    //发布到JCenter上的项目名字
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}

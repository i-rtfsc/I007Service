if (BUILD_APPLICATION.toBoolean()) {
    //作为独立App应用运行
    apply plugin: 'com.android.application'
} else {
    //作为组件运行
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'

android {
    def androidSdk = rootProject.ext.androidSdk
    compileSdkVersion androidSdk.compileSdkVersion
    buildToolsVersion androidSdk.buildToolsVersion
    defaultConfig {
        if (BUILD_APPLICATION.toBoolean()) {
            applicationId androidSdk.applicationId
        }
        minSdkVersion androidSdk.minSdkVersion
        targetSdkVersion androidSdk.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        if (BUILD_NATIVE.toBoolean()) {
            externalNativeBuild {
                cmake {
                    cppFlags "-std=c++11"
                    abiFilters "arm64-v8a"
                }
            }
        }

        //支持svg图片
        vectorDrawables.useSupportLibrary = true

        flavorDimensions "default"

        //使用buildConfigField向BuildConfig类中写入常量
        buildConfigField("int", "BUILD_VERSION_CODE", rootProject.ext.versionCode + "")
        buildConfigField("String", "BUILD_VERSION_NAME", "\"" + rootProject.ext.versionName + "\"")
        buildConfigField("String", "BUILD_VERSION_BRANCH", "\"" + rootProject.ext.versionBranch + "\"")
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            assets.srcDirs = ['assets']
            res.srcDirs = ['res']
            java.srcDirs = ['src']
            aidl.srcDirs = ['aidl']
            jniLibs.srcDirs = ['jniLibs']
        }
    }

    dataBinding {
        enabled true
    }

    //aaptOptions
    androidResources {
        noCompress 'tflite'
    }

    if (BUILD_NATIVE.toBoolean()) {
        externalNativeBuild {
            cmake {
                path "src/cpp/CMakeLists.txt"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    if (BUILD_APPLICATION.toBoolean()) {
        signingConfigs {
            release {
                storeFile file("${rootDir}/keystore/platform.jks")
                storePassword 'android'
                keyAlias 'platform'
                keyPassword 'android'
            }
            debug {
                storeFile file("${rootDir}/keystore/platform.jks")
                storePassword 'android'
                keyAlias 'platform'
                keyPassword 'android'
            }
        }
    }

    buildTypes {
        release {
            zipAlignEnabled true
            minifyEnabled false
            consumerProguardFiles "${project.rootDir}/proguard-rules.pro"
            if (BUILD_APPLICATION.toBoolean()) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            zipAlignEnabled true
            minifyEnabled false
            consumerProguardFiles "${project.rootDir}/proguard-rules.pro"
            if (BUILD_APPLICATION.toBoolean()) {
                signingConfig signingConfigs.debug
            }
        }
    }

    productFlavors {
        standard {
            buildConfigField "String", "BUILD_PRODUCT", "\"standard\""
        }
        //machine learning(all)
        ml {
            buildConfigField "String", "BUILD_PRODUCT", "\"ml\""
        }
        //machine learning(only tf)
        tf {
            buildConfigField "String", "BUILD_PRODUCT", "\"tflite\""
        }
        //machine learning(only pytorch)
        torch {
            buildConfigField "String", "BUILD_PRODUCT", "\"pytorch\""
        }
        //machine learning(only snpe)
        snpe {
            buildConfigField "String", "BUILD_PRODUCT", "\"snpe\""
        }
        //machine learning(only mace)
        mace {
            buildConfigField "String", "BUILD_PRODUCT", "\"mace\""
        }
    }

    if (BUILD_APPLICATION.toBoolean()) {
        packagingOptions {
            pickFirst '**/*.so'
        }
    }

    if (BUILD_APPLICATION.toBoolean()) {
        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def flavors = variant.productFlavors.name
                def apkName = "I007Service-${flavors[0]}.apk"
                outputFileName = new File("./../../../../../../out/${variant.buildType.name}/", apkName)
                //logger.log(LogLevel.WARN, "----------> output apk = ${outputFileName}")
            }
        }
    }
}



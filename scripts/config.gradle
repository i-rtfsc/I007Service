ext {
    timeList = buildTime()
    year = timeList[0] - getFirstYear()
    month = timeList[1]
    birthday = timeList[0] + "/" + timeList[1] + "/1"
    commitCount = getCommitCount(birthday)
    //app版本
    versionCode = genVerCode(timeList[0], month, commitCount)
    versionName = genVerName(year, month, commitCount)
    versionBranch = getLocalBranchName()

    //android开发版本配置
    androidSdk = [
            applicationId    : "com.journeyOS.i007Service",
            testApplicationId: "com.journeyOS.i007test",
            buildToolsVersion: "30.0.3",
            compileSdkVersion: 30,
            targetSdkVersion : 30,
            minSdkVersion    : 29,
    ]

    // 通过 https://mvnrepository.com/ 查询到最新到lib版本
    // 因为 mace 在android sdk 31 上opencl相关 crash
    // 导致无法使用sdk 31，只能找到目前"最新"的又支持sdk 30的lib

    androidxSupportVersion = '1.4.2'
    androidxSupportDependencies = [
            //core_ktx 1.7.0 会要求compileSdkVersion是31
            "core_ktx"      : "androidx.core:core-ktx:1.6.0",
            //appcompat 1.4.0 会要求compileSdkVersion是31
            appcompat       : "androidx.appcompat:appcompat:1.3.1",
            constraintlayout: "androidx.constraintlayout:constraintlayout:2.1.4",
            annotation      : "androidx.annotation:annotation:1.4.0",
//            material        : "com.google.android.material:material:1.6.1"
//            recyclerview    : "androidx.recyclerview:recyclerview:1.2.0",
//            fragment        : "androidx.fragment:fragment-ktx:1.5.0",
//            preference      : "androidx.preference:preference:1.2.0",
//            exifinterface   : "androidx.exifinterface:exifinterface:1.3.3",
//            legacy_v4       : "androidx.legacy:legacy-support-v4:1.0.0",
    ]

    // 2.4.0会要求compileSdkVersion是31
    // androidxLifecycleVersion = '2.5.0'
    androidxLifecycleVersion = '2.2.0'
    androidxLifecycleDependence = [
            "livedata_ktx" : "androidx.lifecycle:lifecycle-livedata-ktx:$androidxLifecycleVersion",
            "viewmodel_ktx": "androidx.lifecycle:lifecycle-viewmodel-ktx:$androidxLifecycleVersion",
            "common_java8" : "androidx.lifecycle:lifecycle-common-java8:$androidxLifecycleVersion",
            "service"      : "androidx.lifecycle:lifecycle-service:$androidxLifecycleVersion",
            "process"      : "androidx.lifecycle:lifecycle-process:$androidxLifecycleVersion",
            "extensions"   : "androidx.lifecycle:lifecycle-extensions:$androidxLifecycleVersion",
    ]

    kotlinVersion = '1.7.10'
    coroutineVersion = '1.6.4'
    kotlinDependencies = [
            "kotlin-jdk"               : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion",
            "kotlin-reflect"           : "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion",
            "kotlin-coroutines-core"   : "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutineVersion",
            "kotlin-coroutines-android": "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutineVersion",
    ]

    //camerax库
    // 使用最新的1.1.0库会要求compileSdkVersion是31
    // 但如果compileSdkVersion是31是，mace(native总的opencl相关)会出问题。
    // 所以还是得等到mace最好适配了再改吧
    def cameraxVersion = "1.0.0-beta05"
    cameraxDependencies = [
            //"camerax-core"     : "androidx.camera:camera-core:cameraxVersion",
            "camerax-camera2"  : "androidx.camera:camera-camera2:$cameraxVersion",
            "camerax-lifecycle": "androidx.camera:camera-lifecycle:$cameraxVersion",
            "camerax-view"     : "androidx.camera:camera-view:1.0.0-alpha12",
    ]

    //tflite库
    //tensorflow-lite-task-text和tensorflow-lite-task-vision是对tensorflow-lite再一次封装，方便开发使用
    tfliteVersion = '2.9.0'
    tfliteSupportVersion = '0.4.1'
    tfDependencies = [
            //tensorflow-lite
            "tensorflow-lite"         : "org.tensorflow:tensorflow-lite:$tfliteVersion",
            "tensorflow-lite-gpu"     : "org.tensorflow:tensorflow-lite-gpu:$tfliteVersion",
            "tensorflow-lite-support" : "org.tensorflow:tensorflow-lite-support:$tfliteSupportVersion",
            "tensorflow-lite-metadata": "org.tensorflow:tensorflow-lite-metadata:$tfliteSupportVersion",
            //https://search.maven.org/
//            "tensorflow-lite-task-text"          : "org.tensorflow:tensorflow-lite-task-text:$tfliteSupportVersion",
//            "tensorflow-lite-task-vision"        : "org.tensorflow:tensorflow-lite-task-vision:$tfliteSupportVersion",
//            "tensorflow-lite-gpu-delegate-plugin": "org.tensorflow:tensorflow-lite-gpu-delegate-plugin:$tfliteSupportVersion",
    ]

    pytorchVersion = '1.12.2'
    pytorchDependencies = [
            //pytorch
            "pytorch-android-lite"            : "org.pytorch:pytorch_android_lite:$pytorchVersion",
            "pytorch_android_torchvision_lite": "org.pytorch:pytorch_android_torchvision_lite:$pytorchVersion",
    ]

    //rx和网络库
    networkDependencies = [
            //rxjava
            "rxjava"        : "io.reactivex.rxjava2:rxjava:2.2.3",
            "rxandroid"     : "io.reactivex.rxjava2:rxandroid:2.1.0",
            //network
            "okhttp"        : "com.squareup.okhttp3:okhttp:3.10.0",
            "retrofit"      : "com.squareup.retrofit2:retrofit:2.5.0",
            "converter-gson": "com.squareup.retrofit2:converter-gson:2.5.0",
            "adapter-rxjava": "com.squareup.retrofit2:adapter-rxjava2:2.5.0",
    ]

    //3方库版本
    roomVersion = '2.3.0'
    threePartyDependencies = [
            //json解析
            "gson"         : "com.google.code.gson:gson:2.9.0",
            //room数据库
            //room 2.4.0 会要求compileSdkVersion是31
            "room-runtime" : "androidx.room:room-runtime:$roomVersion",
            "room-compiler": "androidx.room:room-compiler:$roomVersion",
    ]
}

//https://stackoverflow.com/questions/17097263/automatic-versioning-of-android-build-using-git-describe-with-gradle
def static getFirstYear() {
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        //TODO
        return 2018
    } else {
        def mainCountCmd = ["git", "log", "--reverse", "--pretty=format:%ci"]
        def time = mainCountCmd.execute().pipeTo("sed -n 1p".execute()).text
        def year = time.split(" ")[0].split("-")[0] as Integer
        return year
    }
}

/**
 * 组织版本号（VersionCode）
 * @param year 大版本
 * @param month 小版本
 * @param commitCount 小版本(当月commit数量)
 * @return eg:2021072513
 */
def static genVerCode(int year, int month, int commitCount) {
    return year * 10000 + month * 100 + commitCount
}

/**
 * 组织版本名（VersionName）
 * @param year 大版本
 * @param month 小版本
 * @param commitCount 小版本版本启动日
 * @return eg:v1.2.48.190210.main.24c27618
 */
def static genVerName(int year, int month, int commitCount) {
    def today = new Date().format("yyyyMMdd")
    def branchName = getLocalBranchName()
    def shortId = getShortCommitId()
    return "v$year.$month.$commitCount.$today.$branchName.$shortId"
}

/**
 * 获取累计提交数
 *
 * @param 小版本号更新日期
 * @return 累计提交数
 */
def static getCommitCount(String date, String path = "./") {
    def mainCountCmd = ["git", "log", "--pretty=format:%h", "--after='$date 0:0:0 +0800'", path]

    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        return mainCountCmd.execute().pipeTo("find /v \"\" /c".execute()).text.toInteger()
    } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        return mainCountCmd.execute().pipeTo("wc -l".execute()).text.toInteger() + 1
    } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        return mainCountCmd.execute().pipeTo("wc -l".execute()).text.toInteger() + 1
    }
    //可通过以下指令查看具体提交的位置
    /*git log -47 --pretty=oneline --after="Mon Mar 25 10:31:38 2019 +0800"*/
}

/**
 * 获取简短commit号
 * @return
 */
def static getShortCommitId() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

def static getLocalBranchName() {
    def result = "git symbolic-ref --short -q HEAD".execute().text.trim()
    result += ""
    return result
}

def static buildTime() {
    def year = new Date().format("yyyy", TimeZone.getTimeZone("GMT+08:00")).toString().toInteger()
    def month = new Date().format("MM", TimeZone.getTimeZone("GMT+08:00")).toString().toInteger()
    def day = new Date().format("dd", TimeZone.getTimeZone("GMT+08:00")).toString().toInteger()
    return [year, month, day]
}
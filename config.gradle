ext {
    timeList = buildTime()
    year = timeList[0] - getFirstYear()
    month = timeList[1]
    birthday = timeList[0] + "/" + timeList[1] + "/1"
    commitCount = getCommitCount(birthday)
    //app版本
    versionCode = genVerCode(timeList[0], month, commitCount)
    versionName = genVerName(year, month, commitCount)
    versionBranch = getLocalBranchName()

    //android开发版本配置
    androidSdk = [
            compileSdkVersion: 30,
            buildToolsVersion: "30.0.3",
            applicationId    : "com.journeyOS.i007Service",
            minSdkVersion    : 29,
            targetSdkVersion : 30,
    ]

    androidxSupportVersion = '1.1.0'
    androidxSupportDependencies = [
            core_ktx        : "androidx.core:core-ktx:$androidxSupportVersion",
            appcompat       : "androidx.appcompat:appcompat:$androidxSupportVersion",
            constraintlayout: "androidx.constraintlayout:constraintlayout:${androidxSupportVersion}",
            annotation      : "androidx.annotation:annotation:$androidxSupportVersion",
//            material        : "com.google.android.material:material:$androidxSupportVersion"
//            recyclerview    : "androidx.recyclerview:recyclerview:$androidxSupportVersion",
//            fragment        : "androidx.fragment:fragment-ktx:$androidxSupportVersion",
//            preference      : "androidx.preference:preference:$androidxSupportVersion",
//            exifinterface   : "androidx.exifinterface:exifinterface:${androidxSupportVersion}",
//            legacy_v4       : "androidx.legacy:legacy-support-v4:${androidxSupportVersion}",
    ]

    kotlinVersion = '1.3.70'
    coroutineVersion = '1.3.7'
    kotlinDependencies = [
            "kotlin-jdk"               : "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion",
            "kotlin-reflect"           : "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion",
            "kotlin-coroutines-core"   : "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutineVersion",
            "kotlin-coroutines-android": "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutineVersion",
    ]

    //ai库
    tfDependencies = [
            //tensorflow-lite
            //"tensorflow-lite"         : "org.tensorflow:tensorflow-lite:2.7.0",
            //"tensorflow-lite-metadata": "org.tensorflow:tensorflow-lite-metadata:0.3.0",
            //https://search.maven.org/artifact/org.tensorflow
            "tensorflow-lite-task-text": "org.tensorflow:tensorflow-lite-task-text:0.4.1",
    ]

    pytorchVersion = '1.9.0'
    pytorchDependencies = [
            //pytorch
            "pytorch-android-lite"       : "org.pytorch:pytorch_android_lite:$pytorchVersion",
            "pytorch_android_torchvision": "org.pytorch:pytorch_android_torchvision:$pytorchVersion",
    ]

    //rx和网络库
    networkDependencies = [
            //rxjava
            "rxjava"        : "io.reactivex.rxjava2:rxjava:2.2.3",
            "rxandroid"     : "io.reactivex.rxjava2:rxandroid:2.1.0",
            //network
            "okhttp"        : "com.squareup.okhttp3:okhttp:3.10.0",
            "retrofit"      : "com.squareup.retrofit2:retrofit:2.5.0",
            "converter-gson": "com.squareup.retrofit2:converter-gson:2.5.0",
            "adapter-rxjava": "com.squareup.retrofit2:adapter-rxjava2:2.5.0",
    ]

    //3方库版本
    threePartyDependencies = [
            //json解析
            "gson"         : "com.google.code.gson:gson:2.8.6",
            //room数据库
            "room-runtime" : "androidx.room:room-runtime:2.2.6",
            "room-compiler": "androidx.room:room-compiler:2.2.6",
    ]
}

//https://stackoverflow.com/questions/17097263/automatic-versioning-of-android-build-using-git-describe-with-gradle
def static getFirstYear() {
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        //TODO
        return 2018
    } else {
        def mainCountCmd = ["git", "log", "--reverse", "--pretty=format:%ci"]
        def time = mainCountCmd.execute().pipeTo("sed -n 1p".execute()).text
        def year = time.split(" ")[0].split("-")[0] as Integer
        return year
    }
}

/**
 * 组织版本号（VersionCode）
 * @param year 大版本
 * @param month 小版本
 * @param commitCount 小版本(当月commit数量)
 * @return eg:2021072513
 */
def static genVerCode(int year, int month, int commitCount) {
    return year * 10000 + month * 100 + commitCount
}

/**
 * 组织版本名（VersionName）
 * @param year 大版本
 * @param month 小版本
 * @param commitCount 小版本版本启动日
 * @return eg:v1.2.48.190210.main.24c27618
 */
def static genVerName(int year, int month, int commitCount) {
    def today = new Date().format("yyyyMMdd")
    def branchName = getLocalBranchName()
    def shortId = getShortCommitId()
    return "v$year.$month.$commitCount.$today.$branchName.$shortId"
}

/**
 * 获取累计提交数
 *
 * @param 小版本号更新日期
 * @return 累计提交数
 */
def static getCommitCount(String date, String path = "./") {
    def mainCountCmd = ["git", "log", "--pretty=format:%h", "--after='$date 0:0:0 +0800'", path]

    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        return mainCountCmd.execute().pipeTo("find /v \"\" /c".execute()).text.toInteger()
    } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        return mainCountCmd.execute().pipeTo("wc -l".execute()).text.toInteger() + 1
    } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        return mainCountCmd.execute().pipeTo("wc -l".execute()).text.toInteger() + 1
    }
    //可通过以下指令查看具体提交的位置
    /*git log -47 --pretty=oneline --after="Mon Mar 25 10:31:38 2019 +0800"*/
}

/**
 * 获取简短commit号
 * @return
 */
def static getShortCommitId() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

def static getLocalBranchName() {
    def result = "git symbolic-ref --short -q HEAD".execute().text.trim()
    result += ""
    return result
}

def static buildTime() {
    def year = new Date().format("yyyy", TimeZone.getTimeZone("GMT+08:00")).toString().toInteger()
    def month = new Date().format("MM", TimeZone.getTimeZone("GMT+08:00")).toString().toInteger()
    def day = new Date().format("dd", TimeZone.getTimeZone("GMT+08:00")).toString().toInteger()
    return [year, month, day]
}